{"ast":null,"code":"import axios from \"axios\";\nimport { loginFailed, loginStart, loginSuccess, logOutFailed, logOutStart, logOutSuccess, registerFailed, registerStart, registerSuccess } from \"./authSlice\";\nimport { toast } from 'react-toastify';\nexport const loginUser = async (user, dispatch, navigate) => {\n  dispatch(loginStart());\n  try {\n    const res = await axios.post(\"/v1/auth/login\", user);\n    dispatch(loginSuccess(res.data));\n    toast.success(\"Đăng nhập thành công!\"); // Thông báo thành công\n    navigate(\"/\");\n  } catch (error) {\n    console.error(\"Login failed:\", error.response.data);\n    toast.error(error.response.data);\n    dispatch(loginFailed());\n  }\n};\nexport const registerUser = async (user, dispatch, navigate) => {\n  dispatch(registerStart());\n  try {\n    await axios.post(\"/v1/auth/register\", user);\n    dispatch(registerSuccess());\n    toast.success(\"Đăng ký thành công! Vui lòng kiểm tra email để xác thực.\"); // Thông báo thành công\n    navigate(\"/login\");\n  } catch (error) {\n    console.error(\"Register failed:\", error);\n    toast.error(\"Đăng ký thất bại!\"); // Thông báo lỗi\n    dispatch(registerFailed());\n  }\n};\nexport const logOut = async (dispatch, id, navigate, accessToken, axiosJWT) => {\n  dispatch(logOutStart());\n  try {\n    await axiosJWT.post(\"/v1/auth/logout\", id, {\n      headers: {\n        token: `Bearer ${accessToken}`\n      }\n    });\n    dispatch(logOutSuccess());\n    toast.success(\"Đăng xuất thành công!\"); // Thông báo thành công\n    navigate(\"/login\");\n  } catch (error) {\n    console.error(\"Logout failed:\", error);\n    toast.error(\"Đăng xuất thất bại!\"); // Thông báo lỗi\n    dispatch(logOutFailed());\n  }\n};","map":{"version":3,"names":["axios","loginFailed","loginStart","loginSuccess","logOutFailed","logOutStart","logOutSuccess","registerFailed","registerStart","registerSuccess","toast","loginUser","user","dispatch","navigate","res","post","data","success","error","console","response","registerUser","logOut","id","accessToken","axiosJWT","headers","token"],"sources":["D:/quy/Thư mục mới/DoAnCuoiKy/fontend/src/redux/apiRequest.js"],"sourcesContent":["import axios from \"axios\";\r\nimport { loginFailed, loginStart, loginSuccess, logOutFailed, logOutStart, logOutSuccess, registerFailed, registerStart, registerSuccess } from \"./authSlice\";\r\nimport { toast } from 'react-toastify';\r\n\r\nexport const loginUser = async (user, dispatch, navigate) => {\r\n    dispatch(loginStart());\r\n    try {\r\n        const res = await axios.post(\"/v1/auth/login\", user);\r\n        dispatch(loginSuccess(res.data));\r\n        toast.success(\"Đăng nhập thành công!\"); // Thông báo thành công\r\n        navigate(\"/\");\r\n    } catch (error) {\r\n        console.error(\"Login failed:\", error.response.data);\r\n        toast.error(error.response.data);\r\n        dispatch(loginFailed());\r\n    }\r\n};\r\n\r\nexport const registerUser = async (user, dispatch, navigate) => {\r\n    dispatch(registerStart());\r\n    try {\r\n        await axios.post(\"/v1/auth/register\", user);\r\n        dispatch(registerSuccess());\r\n        toast.success(\"Đăng ký thành công! Vui lòng kiểm tra email để xác thực.\"); // Thông báo thành công\r\n        navigate(\"/login\");\r\n    } catch (error) {\r\n        console.error(\"Register failed:\", error);\r\n        toast.error(\"Đăng ký thất bại!\"); // Thông báo lỗi\r\n        dispatch(registerFailed());\r\n    }\r\n};\r\n\r\nexport const logOut = async (dispatch, id, navigate, accessToken, axiosJWT) => {\r\n    dispatch(logOutStart());\r\n    try {\r\n        await axiosJWT.post(\"/v1/auth/logout\", id, {\r\n            headers: { token: `Bearer ${accessToken}` },\r\n        });\r\n        dispatch(logOutSuccess());\r\n        toast.success(\"Đăng xuất thành công!\"); // Thông báo thành công\r\n        navigate(\"/login\");\r\n    } catch (error) {\r\n        console.error(\"Logout failed:\", error);\r\n        toast.error(\"Đăng xuất thất bại!\"); // Thông báo lỗi\r\n        dispatch(logOutFailed());\r\n    }\r\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,EAAEC,UAAU,EAAEC,YAAY,EAAEC,YAAY,EAAEC,WAAW,EAAEC,aAAa,EAAEC,cAAc,EAAEC,aAAa,EAAEC,eAAe,QAAQ,aAAa;AAC7J,SAASC,KAAK,QAAQ,gBAAgB;AAEtC,OAAO,MAAMC,SAAS,GAAG,MAAAA,CAAOC,IAAI,EAAEC,QAAQ,EAAEC,QAAQ,KAAK;EACzDD,QAAQ,CAACX,UAAU,CAAC,CAAC,CAAC;EACtB,IAAI;IACA,MAAMa,GAAG,GAAG,MAAMf,KAAK,CAACgB,IAAI,CAAC,gBAAgB,EAAEJ,IAAI,CAAC;IACpDC,QAAQ,CAACV,YAAY,CAACY,GAAG,CAACE,IAAI,CAAC,CAAC;IAChCP,KAAK,CAACQ,OAAO,CAAC,uBAAuB,CAAC,CAAC,CAAC;IACxCJ,QAAQ,CAAC,GAAG,CAAC;EACjB,CAAC,CAAC,OAAOK,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,eAAe,EAAEA,KAAK,CAACE,QAAQ,CAACJ,IAAI,CAAC;IACnDP,KAAK,CAACS,KAAK,CAACA,KAAK,CAACE,QAAQ,CAACJ,IAAI,CAAC;IAChCJ,QAAQ,CAACZ,WAAW,CAAC,CAAC,CAAC;EAC3B;AACJ,CAAC;AAED,OAAO,MAAMqB,YAAY,GAAG,MAAAA,CAAOV,IAAI,EAAEC,QAAQ,EAAEC,QAAQ,KAAK;EAC5DD,QAAQ,CAACL,aAAa,CAAC,CAAC,CAAC;EACzB,IAAI;IACA,MAAMR,KAAK,CAACgB,IAAI,CAAC,mBAAmB,EAAEJ,IAAI,CAAC;IAC3CC,QAAQ,CAACJ,eAAe,CAAC,CAAC,CAAC;IAC3BC,KAAK,CAACQ,OAAO,CAAC,0DAA0D,CAAC,CAAC,CAAC;IAC3EJ,QAAQ,CAAC,QAAQ,CAAC;EACtB,CAAC,CAAC,OAAOK,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAAC;IACxCT,KAAK,CAACS,KAAK,CAAC,mBAAmB,CAAC,CAAC,CAAC;IAClCN,QAAQ,CAACN,cAAc,CAAC,CAAC,CAAC;EAC9B;AACJ,CAAC;AAED,OAAO,MAAMgB,MAAM,GAAG,MAAAA,CAAOV,QAAQ,EAAEW,EAAE,EAAEV,QAAQ,EAAEW,WAAW,EAAEC,QAAQ,KAAK;EAC3Eb,QAAQ,CAACR,WAAW,CAAC,CAAC,CAAC;EACvB,IAAI;IACA,MAAMqB,QAAQ,CAACV,IAAI,CAAC,iBAAiB,EAAEQ,EAAE,EAAE;MACvCG,OAAO,EAAE;QAAEC,KAAK,EAAE,UAAUH,WAAW;MAAG;IAC9C,CAAC,CAAC;IACFZ,QAAQ,CAACP,aAAa,CAAC,CAAC,CAAC;IACzBI,KAAK,CAACQ,OAAO,CAAC,uBAAuB,CAAC,CAAC,CAAC;IACxCJ,QAAQ,CAAC,QAAQ,CAAC;EACtB,CAAC,CAAC,OAAOK,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;IACtCT,KAAK,CAACS,KAAK,CAAC,qBAAqB,CAAC,CAAC,CAAC;IACpCN,QAAQ,CAACT,YAAY,CAAC,CAAC,CAAC;EAC5B;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}