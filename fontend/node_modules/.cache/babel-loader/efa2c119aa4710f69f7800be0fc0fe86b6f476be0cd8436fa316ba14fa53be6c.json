{"ast":null,"code":"import axios from \"axios\";\nimport { jwtDecode } from \"jwt-decode\";\nconst refreshToken = async () => {\n  try {\n    const res = await axios.post(\"/v1/auth/refresh\", {\n      withCredentials: true\n    });\n    return res.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const createAxios = (user, dispatch, stateSuccess) => {\n  const newInstance = axios.create();\n  newInstance.interceptors.request.use(async config => {\n    let date = new Date();\n    const decodedToken = jwtDecode(user === null || user === void 0 ? void 0 : user.accessToken);\n    if (decodedToken.exp < date.getTime() / 1000) {\n      const data = await refreshToken();\n      const refreshUser = {\n        ...user,\n        accessToken: data.accessToken\n      };\n      dispatch(stateSuccess(refreshUser));\n      config.headers[\"token\"] = \"Bearer\" + data.accessToken;\n    }\n    return config;\n  }, error => {\n    return Promise.reject(error);\n  });\n  return newInstance;\n};","map":{"version":3,"names":["axios","jwtDecode","refreshToken","res","post","withCredentials","data","error","console","log","createAxios","user","dispatch","stateSuccess","newInstance","create","interceptors","request","use","config","date","Date","decodedToken","accessToken","exp","getTime","refreshUser","headers","Promise","reject"],"sources":["D:/quy/929/DoAnCuoiKy/fontend/src/createInstance.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\n\r\nimport { jwtDecode } from \"jwt-decode\";\r\n\r\n\r\n\r\nconst refreshToken = async () =>{\r\n    try {\r\n        const res = await axios.post(\"/v1/auth/refresh\",{\r\n            withCredentials: true,\r\n        });\r\n        return res.data;\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const createAxios = (user, dispatch, stateSuccess) =>{\r\n    const newInstance = axios.create();\r\n    newInstance.interceptors.request.use(\r\n        async (config) => {\r\n            let date = new Date();\r\n            const decodedToken = jwtDecode(user?.accessToken);\r\n            if(decodedToken.exp < date.getTime()/1000){\r\n                const data = await refreshToken();\r\n                const refreshUser = {\r\n                    ...user,\r\n                    accessToken: data.accessToken,\r\n                };\r\n                dispatch(stateSuccess(refreshUser));\r\n                config.headers[\"token\"] = \"Bearer\" + data.accessToken;\r\n            }\r\n            return config;\r\n        },\r\n        (error) => {\r\n            return Promise.reject(error);\r\n        }\r\n    );\r\n    return newInstance;\r\n}"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAGzB,SAASC,SAAS,QAAQ,YAAY;AAItC,MAAMC,YAAY,GAAG,MAAAA,CAAA,KAAW;EAC5B,IAAI;IACA,MAAMC,GAAG,GAAG,MAAMH,KAAK,CAACI,IAAI,CAAC,kBAAkB,EAAC;MAC5CC,eAAe,EAAE;IACrB,CAAC,CAAC;IACF,OAAOF,GAAG,CAACG,IAAI;EACnB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;EACtB;AACJ,CAAC;AAID,OAAO,MAAMG,WAAW,GAAGA,CAACC,IAAI,EAAEC,QAAQ,EAAEC,YAAY,KAAI;EACxD,MAAMC,WAAW,GAAGd,KAAK,CAACe,MAAM,CAAC,CAAC;EAClCD,WAAW,CAACE,YAAY,CAACC,OAAO,CAACC,GAAG,CAChC,MAAOC,MAAM,IAAK;IACd,IAAIC,IAAI,GAAG,IAAIC,IAAI,CAAC,CAAC;IACrB,MAAMC,YAAY,GAAGrB,SAAS,CAACU,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEY,WAAW,CAAC;IACjD,IAAGD,YAAY,CAACE,GAAG,GAAGJ,IAAI,CAACK,OAAO,CAAC,CAAC,GAAC,IAAI,EAAC;MACtC,MAAMnB,IAAI,GAAG,MAAMJ,YAAY,CAAC,CAAC;MACjC,MAAMwB,WAAW,GAAG;QAChB,GAAGf,IAAI;QACPY,WAAW,EAAEjB,IAAI,CAACiB;MACtB,CAAC;MACDX,QAAQ,CAACC,YAAY,CAACa,WAAW,CAAC,CAAC;MACnCP,MAAM,CAACQ,OAAO,CAAC,OAAO,CAAC,GAAG,QAAQ,GAAGrB,IAAI,CAACiB,WAAW;IACzD;IACA,OAAOJ,MAAM;EACjB,CAAC,EACAZ,KAAK,IAAK;IACP,OAAOqB,OAAO,CAACC,MAAM,CAACtB,KAAK,CAAC;EAChC,CACJ,CAAC;EACD,OAAOO,WAAW;AACtB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}